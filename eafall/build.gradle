apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

import groovy.swing.SwingBuilder

int target_v = 28
int compiled_v = 28

buildscript {
    ext.kotlin_version = '1.3.31'
    ext.exclude_java = []

    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

repositories {
    jcenter()
    mavenCentral()
    google()
}

dependencies {
    implementation project(':andenginephysicsbox2dextension')
    implementation 'org.apache.commons:commons-lang3:3.6'
    implementation 'de.greenrobot:eventbus:2.4.0'
    implementation 'org.simpleframework:simple-xml:2.7.1'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.jakewharton.timber:timber:4.7.1'
    implementation 'com.android.support:multidex:1.0.3'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    //tests
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'com.android.support:support-annotations:28.0.0'
}

android {
    compileSdkVersion compiled_v
    buildToolsVersion "28.0.3"

    packagingOptions {
        pickFirst 'META-INF/LICENSE.txt'
    }

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion target_v
        versionCode 104
        versionName "1.0.4"
        multiDexEnabled true
        testInstrumentationRunner "com.yaroslavlancelot.eafall.test.DefaultInstrumentationTestRunner"
        testApplicationId "com.yaroslavlancelot.eafall.test"
        applicationId "com.yaroslavlancelot.eafall"
        resConfigs "en", "uk", "ru"
    }

    sourceSets {
        main {
            java {
                for (files in exclude_java) {
                    exclude files
                }
            }
        }
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
        main.java.srcDirs += "src/main/kotlin"
    }

    signingConfigs {
        release {
            storePassword ""
            keyPassword ""
            keyAlias ""
            storeFile file("keystore/eafall_demo.keystore")
        }
    }

    buildTypes {
        release {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    android {
        lintOptions {
            abortOnError false
        }
    }
}

task askForPasswords {
    doLast {
        def cons = System.console()
        def storePass, keyPass, alias
        if (cons == null) {
            keyPass = readStringInDialog("Enter a key password", "Please enter it here")
            alias = readStringInDialog("Enter your alias", "Please enter it here")
            storePass = readStringInDialog("Enter a keystore password", "Please enter it here")
        } else {
            keyPass = new String(cons.readPassword("\n\$ Enter key password: "))
            alias = cons.readLine("\n\$ Enter alias name: ")
            storePass = new String(cons.readPassword("\n\$ Enter keystore password: "))
        }

        if (keyPass == null || alias == null || storePass == null ||
                keyPass.isEmpty() || alias.isEmpty() || storePass.isEmpty()) {
            throw new InvalidUserDataException("You must enter both passwords and an alias to proceed")
        }

        android.signingConfigs.release.storePassword = storePass
        android.signingConfigs.release.keyPassword = keyPass
        android.signingConfigs.release.keyAlias = alias
    }
}

tasks.whenTaskAdded { theTask ->
    if (theTask.name.toLowerCase().contains("packageRelease".toLowerCase())) {
        theTask.dependsOn "askForPasswords"
    }
}

def String readStringInDialog(title, hint) {
    def string = ""
    new SwingBuilder().edt {
        dialog(modal: true, // Otherwise the build will continue running before you closed the dialog
                title: title, // Dialog title
                alwaysOnTop: true, // pretty much what the name says
                resizable: true, // Don't allow the user to resize the dialog
                locationRelativeTo: null, // Place dialog in center of the screen
                pack: true, // We need to pack the dialog (so it will take the size of it's children)
                show: true // Let's show it
        ) {
            vbox {
                label(text: hint)
                passwordField(id: 'text')
                button(defaultButton: true, text: 'OK', actionPerformed: {
                    dispose();
                    string = text.text
                })
            }
        }
    }
    return string;
}
